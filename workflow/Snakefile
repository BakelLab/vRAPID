#!/usr/bin/env snakemake

##########
# IMPORT #
##########

import pandas as pd
from snakemake.utils import min_version
min_version("6.8")

##########
# CONFIG #
##########

configfile: workflow.source_path("../config/config.yaml")
mappings = pd.read_csv(config["samples"])
sampleids = mappings["Sample_ID"].tolist()

#########
# RULES #
#########

rule all:
   input:
      data_release_report = expand("{runid}_data_release.txt", runid=config["run_id"])

rule file_rename:
   message: "Rename input file for consistency"
   input:
      sample_folder = ("{sample}/{sample}")
   output:
      renamed_file = directory(("{sample}/01_fastqs"))
   log:
      rename = "logs/01_{sample}.aseembly.snakemake.log"
   shell:
      """
      mv {input.sample_folder} {output.renamed_file} > {log.rename} 2>&1
      """


rule assemble:
   message: "Assembling viral genome"
   input:
      sample_folder = ("{sample}"),
      renamed_file = ("{sample}/01_fastqs")
   params:
      repo_dir = os.environ.get("GIT_REPODIR"),
      pipeline = os.path.join(workflow.basedir, "../workflow/scripts/run_pipeline.py"),
      reference = os.path.join(workflow.basedir, "../db/", config["reference"]),
      forward_primer = os.path.join(workflow.basedir, "../db/", config["forward_primer"]),
      reverse_primer = os.path.join(workflow.basedir, "../db/", config["reverse_primer"]),
      genbankfile = os.path.join(workflow.basedir, "../db/", config["genbank"]),
      length = config["length"],
      ref_headers = config["ref_fasta_headers"]
   output:
      consensus_fasta_file=('{sample}/02_assembly/{sample}.fasta'),
      bamfile = ("{sample}/02_assembly/{sample}_ref.bam")
   conda:
      "envs/env.yml"
   log:
      assembly = "logs/02_{sample}.aseembly.snakemake.log"
   shell:
      """
      python {params.pipeline} -rd {params.repo_dir} -i {input.sample_folder} -r1 _R1_001.fastq.gz -r2 _R2_001.fastq.gz -r {params.reference} -pf {params.forward_primer} -pr {params.reverse_primer} -g {params.genbankfile} -l {params.length} -headers {params.ref_headers} > {log.assembly} 2>&1
	  """


rule variant_analysis:
   message: "Perform intra host variant analysis on virus library"
   input:
      sample_folder = ("{sample}"),
      consensus_fasta_file = ('{sample}/02_assembly/{sample}.fasta')
   params:
      repo_dir=os.environ.get("GIT_REPODIR"),
      var_analysis=os.path.join(workflow.basedir, "../workflow/scripts/variant_analysis.py"),
      reference = os.path.join(workflow.basedir, "../db/", config["reference"]),
      ps_2kb = os.path.join(workflow.basedir, "../db/", config["primer_set_2kb"]),
      ps_1_5kb = os.path.join(workflow.basedir, "../db/", config["primer_set_1_5kb"]),
   output:
      pileup_file=('{sample}/04_variants/pileup')
   conda:
      "envs/env.yml"
   log:
      varanalysis = "logs/04_{sample}.variantanalysis.snakemake.log"
   shell:
      """
      python {params.var_analysis} -rd {params.repo_dir} -i {input.sample_folder} -r {params.reference} -ps_2 {params.ps_2kb} -ps_1_5 {params.ps_1_5kb} > {log.varanalysis} 2>&1
      """
      
      
rule QC_analysis:
   message: "Perform QC analysis of the virus library"
   input:
      sample_folder = ("{sample}"),
      pileup_file = ('{sample}/04_variants/pileup')
   params:
      repo_dir=os.environ.get("GIT_REPODIR"),
      run_ID = config["run_id"],
      QC=os.path.join(workflow.basedir, "../workflow/scripts/run_QC.py"),
      reference = os.path.join(workflow.basedir, "../db/", config["reference"]),
      forward_primer = os.path.join(workflow.basedir, "../db/", config["forward_primer"]),
      reverse_primer = os.path.join(workflow.basedir, "../db/", config["reverse_primer"]),
      virus = config["virus"],
      breakdown = os.path.join(workflow.basedir, "../workflow/scripts/taxanomic_breakdown.R"),
      plotcoverage = os.path.join(workflow.basedir, "../workflow/scripts/plot-coverage-report.R")
   output:
      qc_file = ('{sample}/03_qualityControl/{sample}_quality_control.pdf'),
      kraken = ("{sample}/03_qualityControl/{sample}_kraken_report.out")		
   conda:
      "envs/env.yml"
   log:
      QC = "logs/03_{sample}.QC.snakemake.log"
   shell:
      """
      python {params.QC} -rd {params.repo_dir} -i {input.sample_folder} -kdb /sc/arion/projects/PVI/db/minikraken_8GB_20200312 -r {params.reference} -pf {params.forward_primer} -pr {params.reverse_primer} -v {params.virus} -pc {params.plotcoverage} -tb {params.breakdown} > {log.QC} 2>&1
      """
		    
rule run_genome_annotation:
   message: "Preform genome annotation if applicable"
   input:
      consensus_fasta_file = ('{sample}/02_assembly/{sample}.fasta'),
      qc_file = ('{sample}/03_qualityControl/{sample}_quality_control.pdf'),
   params:
      virus = config["virus"],
      annotation_script = os.path.join(workflow.basedir, "../workflow/scripts/run-genome-annotation.py")
   output:
      annotation_out = ("{sample}/02_assembly/{sample}_genome_annotation.txt"),
   conda:
      "envs/vadr.yml"
   log:
      annotation = "logs/06_{sample}.annotation.snakemake.log"
   shell:
      """
	  python {params.annotation_script} -i {input.consensus_fasta_file} -v {params.virus} > {log.annotation} 2>&1
      """


rule push_data_pathogendb:
   message: "Push genome assembly data to pathogenDB"
   input:
      annotation_out = ("{sample}/02_assembly/{sample}_genome_annotation.txt")
   params:
      sample_name = ("{sample}"),
      run_ID = config["run_id"],
      pdbpush=os.path.join(workflow.basedir, "../workflow/scripts/all-virus_assembly_push.py"),
      config=os.path.join(workflow.basedir, "../config/config.yaml")
   output:
      pdb_upload_check = ("{sample}/05_status/pdb_upload_complete.txt")
   conda:
      "envs/env.yml"
   log:
      PDBPush = "logs/05_{sample}.PDBPush.snakemake.log"
   shell:
      """
      python {params.pdbpush} -s {params.sample_name} -r {params.run_ID} -c {params.config} > {log.PDBPush} 2>&1
      touch {output.pdb_upload_check}
      """


rule run_QualiMap_sample:
   message: "Run Qualimap for each sample" 
   input:
      bam = expand("{sample}/02_assembly/{sample}_ref.bam", sample=sampleids),
      qc_file = expand('{sample}/03_qualityControl/{sample}_quality_control.pdf', sample=sampleids),
      pdb_upload_check = expand("{sample}/05_status/pdb_upload_complete.txt", sample=sampleids)
      
   output:
      qualimap_dirs = ("multi_bamqc/multisampleBamQcReport.html")
   log:
      qualimap = "logs/07_qualimap.snakemake.log"
   shell:
      """
      module load qualimap
      qualimap multi-bamqc -d multibamqc_input.txt -r > {log.qualimap} 2>&1
      """


rule run_multiqc:
   message: "Generate MultiQC Report for the run"
   input:
      qualimap_all_report = ("multi_bamqc/multisampleBamQcReport.html")
   output:
      mqc_file = ("multiqc_report.html"),
   conda:
      "envs/env.yml"
   log:
      multiqc = "logs/08_multiqc.snakemake.log"
   shell:
      """
      multiqc . > {log.multiqc} 2>&1
      """ 


rule push_QC_report:
   message: "Push the MultiQC Report to PDB"
   input:
      mqc_file = ("multiqc_report.html"),
   params:
      push_script = os.path.join(workflow.basedir, "../workflow/scripts/move_QC_PDB.py"),
      run_ID = expand("{runid}", runid=config["run_id"])
   output:
      moved_files = "file_movement_message.txt"
   conda:
      "envs/env.yml"
   log:
      pushQC = "logs/09_qcpush.snakemake.log"
   shell:
      """
      python {params.push_script} -r {params.run_ID} > {log.pushQC} 2>&1
      """


rule version_check:
   message: "Generate version report for the run"
   input:
      moved_files = "file_movement_message.txt"
   params:
      run_ID = config["run_id"],
      reference = config["reference"],
      genbankfile = config["genbank"],
      ps1 = config["primer_set_1_5kb"],
      ps2 = config["primer_set_2kb"]
   output:
      version_report = expand("{runid}_software_version.txt", runid=config["run_id"])
   conda:
      "envs/env.yml"
   log:
      versioncheck = "logs/10_versioncheck.snakemake.log"
   shell:
      """
      echo "{params.run_ID} was run using the following versions \n" > {output.version_report}
      echo "\n Name                    Version                   Build  Channel \n SAMTOOLS: \n" &>> {output.version_report}
      conda list | grep -w "^samtools" &>> {output.version_report}
      
      echo "\n CUTADAPT: \n" &>> {output.version_report}
      conda list | grep -w "^cutadapt" &>> {output.version_report}
      
      echo "\n MINIMAP2: \n" &>> {output.version_report}
      conda list | grep -w "minimap2" &>> {output.version_report}
      
      echo "\n PILON: \n" &>> {output.version_report}
      conda list | grep "pilon" &>> {output.version_report}
      
	  echo "\n QUALIMAP: \n" &>> {output.version_report}
	  conda list | grep "qualimap" &>> {output.version_report}
	  
	  echo "\n SHOVILL: \n" &>> {output.version_report}
	  conda list | grep "shovill" &>> {output.version_report}
	  
	  echo "\n PROKKA: \n" &>> {output.version_report}
	  conda list | grep "prokka" &>> {output.version_report}
	  
	  echo "\n KRAKEN2: \n" &>> {output.version_report}
	  conda list | grep "kraken2" &>> {output.version_report}
	  
	  echo "\n PYTHON: \n" &>> {output.version_report}
	  conda list | grep "^python" &>> {output.version_report}
	  
	  echo "\n MULTIQC: \n" &>> {output.version_report}
	  conda list | grep "multiqc" &>> {output.version_report}
	  
	  echo "\n FASTQC: \n" &>> {output.version_report}
	  conda list | grep "fastqc" &>> {output.version_report}

	  echo "\n PICARD Alignment Sumamry Metrics: \n" &>> {output.version_report}
	  conda list | grep "picard" &>> {output.version_report}
	  
	  echo "\n {params.run_ID} was aligned against the following reference: \n {params.reference} \n Using the following genabnk file: \n {params.genbankfile} \n " &>> {output.version_report}
	  echo "\n primer sets used were: \n (1) {params.ps1} \n (2) {params.ps2}" &>> {output.version_report} > {log.versioncheck} 2>&1
      """


rule clean_up:
   message: "Remove intermediatary output"
   input:
      version_report = expand("{runid}_software_version.txt", runid=config["run_id"])
   output:
      cleanup_report = expand("{runid}_cleaned.txt", runid=config["run_id"])
   params:
      sample_ids = expand("{sample}", sample=sampleids),
      cleanup = os.path.join(workflow.basedir, "../workflow/scripts/cleanup.py"),
      samples_run = config["samples"]
   conda:
      "envs/env.yml"
   log:
      cleanup = "logs/11_cleanup.snakemake.log"
   shell:
      """
      python {params.cleanup} -p {params.samples_run} > {log.cleanup} 2>&1
      touch {output.cleanup_report}
      """
    
      
rule run_report:
   message: "Generate run summary report"
   input:
      cleanup_report = expand("{runid}_cleaned.txt", runid=config["run_id"])
   output:
      run_report = expand("{runid}_run_report.csv", runid=config["run_id"])
   params:
      run_ID = config["run_id"],
      report_script = os.path.join(workflow.basedir, "../workflow/scripts/generate_run_report.R"),
   conda:
      "envs/env.yml"
   log:
      reporting = "logs/12_reporting.snakemake.log"
   shell:
      """
      Rscript {params.report_script} {params.run_ID} > {log.reporting} 2>&1
      """
      
  
rule data_release_prep:
   message: "Create Data Release files"
   input:
      cleanup_report = expand("{runid}_cleaned.txt", runid=config["run_id"])
   output:
      data_release_report = expand("{runid}_data_release.txt", runid=config["run_id"])
   params:
      run_ID = config["run_id"],
      status_script = os.path.join(workflow.basedir, "../workflow/scripts/data-release.py"),
      sample_mapping = config["samples"],
      ref_header = config["ref_fasta_headers"],
      virus = config["virus"]
   conda:
      "envs/env.yml"
   log:
      datarelease = "logs/13_datarelease.snakemake.log"
   shell:
      """
      python {params.status_script} -p {params.sample_mapping} -r {params.run_ID} -v {params.virus} -f {params.ref_header} > {log.datarelease} 2>&1
      touch {output.data_release_report}
      """
            
